export function RulesPlugin({ map, measurementUnits, setClassifiedLayers, classifiedLayersStyles, unclassifiedLayersStyles, mapJurisdictions, setMapJurisdictions, selectedAdvisory, setSelectedAdvisory, clearSelectedAdvisory, fetchClickedAdvisories, clickedAdvisories, isFetchingClickedAdvisories, clearClickedAdvisories, fetchAdvisories, mapBoundsGeometry, setMapBoundsGeometry, selectedRulesetsBySource, visibleRulesetsIds, setIsMapPartiallyOverUnavailableJurisdiction, appliedAdvisoriesFilter, shouldShowInactiveAdvisories, fetchLocationName, fetchWeather, setZoomLevel, setHighlightedLayer, highlightedLayer, clearHighlightedLayer, showLocationInformation, showAdvisoriesFilter, showAdvisoriesList, showRulesetsMenu, showClickedAdvisoriesBox, showInactiveAdvisories, mapBoundsGeometryCenter, locationName, locationWeather, advisoriesData, advisoriesCounter, zoomLevel, jurisdictions, selectedRulesets, setSelectedRulesets, isMapPartiallyOverUnavailableJurisdiction, fetchRulesetInformation, rulesetInformation, isFetchingRulesetInformation, setAppliedAdvisoriesFilter, hideInactiveAdvisories, injectedSelectedRulesets, menusSettings, selectedAdvisorySettings, injectedRulesets, allowDynamicRulesets, tileServerAccessToken, shouldIncludeAccessTokenInTileService, onRulesetsUpdate, injectLayerMetadata, availableDynamicJurisdictionsUUIDs, whiteLabelAvailableJurisdictionUUIDs, allowFetchAdvisoriesData, rulesetsMenuPortalModeEnabled, rulesetsMenuPortalInlineStyles, selectedAdvisoryHasSmallSize, showToggleInjectedRulesetsVisibility, useSmallRulesetsMenuStyles }: {
    map: any;
    measurementUnits: any;
    setClassifiedLayers: any;
    classifiedLayersStyles: any;
    unclassifiedLayersStyles: any;
    mapJurisdictions: any;
    setMapJurisdictions: any;
    selectedAdvisory: any;
    setSelectedAdvisory: any;
    clearSelectedAdvisory: any;
    fetchClickedAdvisories: any;
    clickedAdvisories: any;
    isFetchingClickedAdvisories: any;
    clearClickedAdvisories: any;
    fetchAdvisories: any;
    mapBoundsGeometry: any;
    setMapBoundsGeometry: any;
    selectedRulesetsBySource: any;
    visibleRulesetsIds: any;
    setIsMapPartiallyOverUnavailableJurisdiction: any;
    appliedAdvisoriesFilter: any;
    shouldShowInactiveAdvisories: any;
    fetchLocationName: any;
    fetchWeather: any;
    setZoomLevel: any;
    setHighlightedLayer: any;
    highlightedLayer: any;
    clearHighlightedLayer: any;
    showLocationInformation: any;
    showAdvisoriesFilter: any;
    showAdvisoriesList: any;
    showRulesetsMenu: any;
    showClickedAdvisoriesBox: any;
    showInactiveAdvisories: any;
    mapBoundsGeometryCenter: any;
    locationName: any;
    locationWeather: any;
    advisoriesData: any;
    advisoriesCounter: any;
    zoomLevel: any;
    jurisdictions: any;
    selectedRulesets: any;
    setSelectedRulesets: any;
    isMapPartiallyOverUnavailableJurisdiction: any;
    fetchRulesetInformation: any;
    rulesetInformation: any;
    isFetchingRulesetInformation: any;
    setAppliedAdvisoriesFilter: any;
    hideInactiveAdvisories: any;
    injectedSelectedRulesets: any;
    menusSettings: any;
    selectedAdvisorySettings: any;
    injectedRulesets: any;
    allowDynamicRulesets: any;
    tileServerAccessToken: any;
    shouldIncludeAccessTokenInTileService: any;
    onRulesetsUpdate: any;
    injectLayerMetadata: any;
    availableDynamicJurisdictionsUUIDs: any;
    whiteLabelAvailableJurisdictionUUIDs: any;
    allowFetchAdvisoriesData: any;
    rulesetsMenuPortalModeEnabled: any;
    rulesetsMenuPortalInlineStyles: any;
    selectedAdvisoryHasSmallSize: any;
    showToggleInjectedRulesetsVisibility: any;
    useSmallRulesetsMenuStyles: any;
}): JSX.Element;
export namespace RulesPlugin {
    namespace defaultProps {
        const showLocationInformation: boolean;
        const showAdvisoriesFilter: boolean;
        const showAdvisoriesList: boolean;
        const showRulesetsMenu: boolean;
        const showClickedAdvisoriesBox: boolean;
        const injectedSelectedRulesets: null;
        namespace menusSettings {
            const position: string;
            const isolated: boolean;
        }
        namespace selectedAdvisorySettings {
            const cssPosition: {};
        }
        const injectedRulesets: never[];
        const allowDynamicRulesets: boolean;
        const tileServerAccessToken: string;
        function onRulesetsUpdate(): void;
        function injectLayerMetadata(): void;
        const availableDynamicJurisdictionsUUIDs: never[];
        const whiteLabelAvailableJurisdictionUUIDs: never[];
        const allowFetchAdvisoriesData: boolean;
        const rulesetsMenuPortalModeEnabled: boolean;
        const rulesetsMenuPortalInlineStyles: {};
        const shouldIncludeAccessTokenInTileService: boolean;
        const selectedAdvisoryHasSmallSize: boolean;
        const showToggleInjectedRulesetsVisibility: boolean;
        const useSmallRulesetsMenuStyles: boolean;
    }
    namespace propTypes {
        export const map: any;
        export const measurementUnits: any;
        export const classifiedLayersStyles: any;
        export const unclassifiedLayersStyles: any;
        export const mapJurisdictions: any;
        export const setMapJurisdictions: any;
        export const selectedAdvisory: any;
        export const clearSelectedAdvisory: any;
        export const setSelectedAdvisory: any;
        export const fetchClickedAdvisories: any;
        export const clearClickedAdvisories: any;
        export const fetchAdvisories: any;
        export const clickedAdvisories: any;
        export const isFetchingClickedAdvisories: any;
        export const mapBoundsGeometry: any;
        export const setMapBoundsGeometry: any;
        export const selectedRulesetsBySource: any;
        export const setClassifiedLayers: any;
        export const visibleRulesetsIds: any;
        export const setIsMapPartiallyOverUnavailableJurisdiction: any;
        export const appliedAdvisoriesFilter: any;
        export const shouldShowInactiveAdvisories: any;
        export const fetchLocationName: any;
        export const fetchWeather: any;
        export const setZoomLevel: any;
        export const highlightedLayer: any;
        export const setHighlightedLayer: any;
        export const clearHighlightedLayer: any;
        const showLocationInformation_1: any;
        export { showLocationInformation_1 as showLocationInformation };
        const showAdvisoriesFilter_1: any;
        export { showAdvisoriesFilter_1 as showAdvisoriesFilter };
        const showAdvisoriesList_1: any;
        export { showAdvisoriesList_1 as showAdvisoriesList };
        const showRulesetsMenu_1: any;
        export { showRulesetsMenu_1 as showRulesetsMenu };
        const showClickedAdvisoriesBox_1: any;
        export { showClickedAdvisoriesBox_1 as showClickedAdvisoriesBox };
        export const showInactiveAdvisories: any;
        export const mapBoundsGeometryCenter: any;
        export const locationName: any;
        export const locationWeather: any;
        export const advisoriesData: any;
        export const advisoriesCounter: any;
        export const zoomLevel: any;
        export const jurisdictions: any;
        export const selectedRulesets: any;
        export const setSelectedRulesets: any;
        export const isMapPartiallyOverUnavailableJurisdiction: any;
        export const fetchRulesetInformation: any;
        export const rulesetInformation: any;
        export const isFetchingRulesetInformation: any;
        export const setAppliedAdvisoriesFilter: any;
        export const hideInactiveAdvisories: any;
        const injectedSelectedRulesets_1: any;
        export { injectedSelectedRulesets_1 as injectedSelectedRulesets };
        const menusSettings_1: any;
        export { menusSettings_1 as menusSettings };
        const selectedAdvisorySettings_1: any;
        export { selectedAdvisorySettings_1 as selectedAdvisorySettings };
        const injectedRulesets_1: any;
        export { injectedRulesets_1 as injectedRulesets };
        const allowDynamicRulesets_1: any;
        export { allowDynamicRulesets_1 as allowDynamicRulesets };
        const tileServerAccessToken_1: any;
        export { tileServerAccessToken_1 as tileServerAccessToken };
        const onRulesetsUpdate_1: any;
        export { onRulesetsUpdate_1 as onRulesetsUpdate };
        const injectLayerMetadata_1: any;
        export { injectLayerMetadata_1 as injectLayerMetadata };
        const availableDynamicJurisdictionsUUIDs_1: any;
        export { availableDynamicJurisdictionsUUIDs_1 as availableDynamicJurisdictionsUUIDs };
        const whiteLabelAvailableJurisdictionUUIDs_1: any;
        export { whiteLabelAvailableJurisdictionUUIDs_1 as whiteLabelAvailableJurisdictionUUIDs };
        const allowFetchAdvisoriesData_1: any;
        export { allowFetchAdvisoriesData_1 as allowFetchAdvisoriesData };
        const rulesetsMenuPortalModeEnabled_1: any;
        export { rulesetsMenuPortalModeEnabled_1 as rulesetsMenuPortalModeEnabled };
        const rulesetsMenuPortalInlineStyles_1: any;
        export { rulesetsMenuPortalInlineStyles_1 as rulesetsMenuPortalInlineStyles };
        const shouldIncludeAccessTokenInTileService_1: any;
        export { shouldIncludeAccessTokenInTileService_1 as shouldIncludeAccessTokenInTileService };
        const selectedAdvisoryHasSmallSize_1: any;
        export { selectedAdvisoryHasSmallSize_1 as selectedAdvisoryHasSmallSize };
        const showToggleInjectedRulesetsVisibility_1: any;
        export { showToggleInjectedRulesetsVisibility_1 as showToggleInjectedRulesetsVisibility };
        const useSmallRulesetsMenuStyles_1: any;
        export { useSmallRulesetsMenuStyles_1 as useSmallRulesetsMenuStyles };
    }
}
